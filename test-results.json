{
  "evalId": "eval-hAs-2025-10-16T13:59:22",
  "results": {
    "version": 3,
    "timestamp": "2025-10-16T13:59:22.575Z",
    "prompts": [
      {
        "raw": "Create a simple TypeScript function that adds two numbers",
        "label": "Create a simple TypeScript function that adds two numbers",
        "id": "a72379da6ad9cd55278b3244b335aa632ee6ab9d942849d4abc4742efa2e110f",
        "provider": "anthropic:messages:claude-sonnet-4-20250514",
        "metrics": {
          "score": 5.5,
          "testPassCount": 1,
          "testFailCount": 0,
          "testErrorCount": 0,
          "assertPassCount": 2,
          "assertFailCount": 0,
          "totalLatencyMs": 13,
          "tokenUsage": {
            "prompt": 0,
            "completion": 0,
            "cached": 351,
            "total": 351,
            "numRequests": 1,
            "completionDetails": {
              "reasoning": 0,
              "acceptedPrediction": 0,
              "rejectedPrediction": 0
            },
            "assertions": {
              "total": 682,
              "prompt": 0,
              "completion": 0,
              "cached": 682,
              "numRequests": 0,
              "completionDetails": {
                "reasoning": 0,
                "acceptedPrediction": 0,
                "rejectedPrediction": 0
              }
            }
          },
          "namedScores": {},
          "namedScoresCount": {},
          "cost": 0.0050609999999999995
        }
      }
    ],
    "results": [
      {
        "cost": 0.0050609999999999995,
        "gradingResult": {
          "pass": true,
          "score": 5.5,
          "reason": "All assertions passed",
          "namedScores": {},
          "tokensUsed": {
            "total": 682,
            "prompt": 0,
            "completion": 0,
            "cached": 682,
            "numRequests": 0
          },
          "componentResults": [
            {
              "pass": true,
              "score": 1,
              "reason": "Generated valid function code"
            },
            {
              "assertion": {
                "type": "llm-rubric",
                "value": "Does this code:\n1. Contain a function that adds two numbers?\n2. Look syntactically correct?\n3. Follow basic TypeScript conventions?\n\nScore 0-10. Pass if >= 7.\n",
                "provider": "anthropic:messages:claude-sonnet-4-20250514"
              },
              "pass": true,
              "score": 10,
              "reason": "The output contains multiple well-formed TypeScript functions that add two numbers (regular function declaration and arrow function variants). The syntax is correct with proper TypeScript type annotations for parameters (a: number, b: number) and return types (: number). It follows TypeScript conventions including type annotations, proper variable declarations with const, and includes error handling. The code demonstrates good practices and would compile without syntax errors.",
              "tokensUsed": {
                "total": 682,
                "prompt": 0,
                "completion": 0,
                "cached": 682,
                "numRequests": 0,
                "completionDetails": {
                  "reasoning": 0,
                  "acceptedPrediction": 0,
                  "rejectedPrediction": 0
                }
              }
            }
          ]
        },
        "id": "09113167-fdca-4797-a888-48e4b2837ea0",
        "latencyMs": 13,
        "namedScores": {},
        "prompt": {
          "raw": "Create a simple TypeScript function that adds two numbers",
          "label": "Create a simple TypeScript function that adds two numbers"
        },
        "promptId": "a72379da6ad9cd55278b3244b335aa632ee6ab9d942849d4abc4742efa2e110f",
        "promptIdx": 0,
        "provider": {
          "id": "anthropic:messages:claude-sonnet-4-20250514",
          "label": ""
        },
        "response": {
          "output": "Here's a simple TypeScript function that adds two numbers:\n\n```typescript\nfunction addNumbers(a: number, b: number): number {\n    return a + b;\n}\n\n// Example usage:\nconst result = addNumbers(5, 3);\nconsole.log(result); // Output: 8\n```\n\nYou can also write it as an arrow function:\n\n```typescript\nconst addNumbers = (a: number, b: number): number => {\n    return a + b;\n};\n\n// Or even more concise:\nconst addNumbers = (a: number, b: number): number => a + b;\n\n// Example usage:\nconst result = addNumbers(10, 7);\nconsole.log(result); // Output: 17\n```\n\n**Key TypeScript features demonstrated:**\n- **Type annotations**: `a: number, b: number` specifies that both parameters must be numbers\n- **Return type annotation**: `: number` specifies that the function returns a number\n- **Type safety**: TypeScript will give you an error if you try to pass non-number values\n\n**Example with error handling:**\n```typescript\nfunction addNumbers(a: number, b: number): number {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n        throw new Error('Both arguments must be numbers');\n    }\n    return a + b;\n}\n```\n\nThe TypeScript compiler will catch type errors at compile time, making your code more robust!",
          "tokenUsage": {
            "cached": 351,
            "total": 351
          },
          "finishReason": "stop",
          "cost": 0.0050609999999999995
        },
        "score": 5.5,
        "success": true,
        "testCase": {
          "description": "Basic code generation test",
          "assert": [
            {
              "type": "javascript",
              "value": "// Check if output contains function-like code\nconst hasFunction = /function|const.*=|=>/.test(output);\nconst hasReturn = /return/.test(output);\n\nreturn {\n  pass: hasFunction,\n  score: hasFunction ? 1 : 0,\n  reason: hasFunction ? \"Generated valid function code\" : \"No function found\"\n};\n"
            },
            {
              "type": "llm-rubric",
              "value": "Does this code:\n1. Contain a function that adds two numbers?\n2. Look syntactically correct?\n3. Follow basic TypeScript conventions?\n\nScore 0-10. Pass if >= 7.\n",
              "provider": "anthropic:messages:claude-sonnet-4-20250514"
            }
          ],
          "vars": {},
          "options": {},
          "metadata": {}
        },
        "testIdx": 0,
        "vars": {},
        "metadata": {
          "_promptfooFileMetadata": {}
        },
        "failureReason": 0
      }
    ],
    "stats": {
      "successes": 1,
      "failures": 0,
      "errors": 0,
      "tokenUsage": {
        "prompt": 0,
        "completion": 0,
        "cached": 351,
        "total": 351,
        "numRequests": 1,
        "completionDetails": {
          "reasoning": 0,
          "acceptedPrediction": 0,
          "rejectedPrediction": 0
        },
        "assertions": {
          "total": 682,
          "prompt": 0,
          "completion": 0,
          "cached": 682,
          "numRequests": 0,
          "completionDetails": {
            "reasoning": 0,
            "acceptedPrediction": 0,
            "rejectedPrediction": 0
          }
        }
      }
    }
  },
  "config": {
    "description": "LLM Code Generation Quality Check",
    "prompts": [
      "Create a simple TypeScript function that adds two numbers"
    ],
    "providers": [
      {
        "id": "anthropic:messages:claude-sonnet-4-20250514",
        "config": {
          "temperature": 0.3,
          "max_tokens": 500
        }
      }
    ],
    "tests": [
      {
        "description": "Basic code generation test",
        "assert": [
          {
            "type": "javascript",
            "value": "// Check if output contains function-like code\nconst hasFunction = /function|const.*=|=>/.test(output);\nconst hasReturn = /return/.test(output);\n\nreturn {\n  pass: hasFunction,\n  score: hasFunction ? 1 : 0,\n  reason: hasFunction ? \"Generated valid function code\" : \"No function found\"\n};\n"
          },
          {
            "type": "llm-rubric",
            "value": "Does this code:\n1. Contain a function that adds two numbers?\n2. Look syntactically correct?\n3. Follow basic TypeScript conventions?\n\nScore 0-10. Pass if >= 7.\n",
            "provider": "anthropic:messages:claude-sonnet-4-20250514"
          }
        ]
      }
    ],
    "sharing": false,
    "outputPath": "./test-results.json",
    "extensions": []
  },
  "shareableUrl": null,
  "metadata": {
    "promptfooVersion": "0.118.12",
    "nodeVersion": "v22.17.1",
    "platform": "darwin",
    "arch": "arm64",
    "exportedAt": "2025-10-16T13:59:22.707Z",
    "evaluationCreatedAt": "2025-10-16T13:59:22.575Z"
  }
}